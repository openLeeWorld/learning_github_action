name: input_workflow
on:
  # Allows you to run this workflow from another workflow
  workflow_call:
    inputs:
      title:
        required: true
        type: string
      body:
        required: true
        type: string
  # Allow you to call this manually from the Actions tab
  workflow_dispatch:
    inputs:
      title:
        description: 'Issue title'
        required: true
      body:
        description: 'Issue body'
        required: true

jobs:
  create_issue_on_failure: 
    runs-on: ubuntu-latest
    permissions:
      issues: write # issue를 쓰기위한 권한을 부여
    steps:
      - name: Create issue using REST API  
        run: | # multi-line string
          curl -L \ 
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ github.repository }}/issues \
          -d '{"title":"Failure: ${{ inputs.title }}","body":"Details: ${{ inputs.body }}"}'
  # curl -L: 리다이렉션 Location을 따라감, -d: data, -X: method, -H: 헤더
  # secrets.GITHUB_TOKEN은 각 작업에 대해 고유한, Github에서 워크플로우를 위해 
  # 생성하는 토큰이며, 작업이 완료되면 만료됨 (커밋 푸시, 이슈 생성 등)
  setup:
    runs-on: ubuntu-latest
    outputs: # step값을 참조해서 다른 잡에게 출력을 build-stage로 넘긴다.
      build-stage: ${{ steps.set-debug-stage.outputs.BUILD_STAGE }}
    steps:
      - name: Set debug
        id: set-debug-stage
        run: echo "BUILD_STAGE=debug" >> $GITHUB_OUTPUT
  
  changedlog:
    runs-on: ubuntu-latest
    needs: setup
    # Map a step output to a job output
    outputs:
      artifact-tag: ${{ steps.changelog.outputs.version }}
    # description: "The new version"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Conventional Changelog Action
        id: changelog
        uses: TriPSs/conventional-changelog-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          output-file: "false"
  
  report:
    runs-on: ubuntu-latest
    needs: [setup, changedlog] #  sequencing: 잡에 순서조건을 붙임
    steps:
      - name: Get stage
        run: echo "The build stage is ${{ needs.setup.outputs.build-stage }}"

      - name: Get artifact-tag
        run: echo "The artifact tag is ${{ needs.changedlog.outputs.artifact-tag }}"
        # 원본에 항목이 없어서 빈칸으로 뜸
        

# 깃허브 이슈를 자동으로 생성
# inputs: 필요한 입력값들을 정의
# 이 workflow는 수동으로 시작하거나 다른 workflow가 issue를 생성 할 수 있다.
# 어떤 스텝이 액션을 사용하고 해당 액션에 action.yml에 outputs를 캡쳐가능
